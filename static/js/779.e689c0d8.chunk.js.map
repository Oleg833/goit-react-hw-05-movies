{"version":3,"file":"static/js/779.e689c0d8.chunk.js","mappings":"wPAEaA,E,OAAmBC,GAAAA,IAAH,sS,2BC6C7B,EAzCgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,IAAU,WAAtBD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,GACb,IAAME,EAAY,mCAAG,8GAEEC,EAAAA,EAAAA,IAAkBX,GAFpB,OAEXY,EAFW,OAGjBR,EAAWQ,GAHM,gDAKjBN,EAAW,EAAD,IALO,yBAOjBE,GAAa,GAPI,4EAAH,qDAUlBE,GACD,GAAE,CAACV,KAGF,UAACF,EAAD,WACGK,EAAQU,OAAS,GAChB,wBACGV,EAAQW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,wBAAKD,KACL,uBAAIC,MAFGF,EADE,OAQf,iDAEDR,IAAa,SAACW,EAAA,EAAD,IACbb,IAAW,oDAGjB,C,+LC3CDc,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,mCACTC,gBAAgB,GAGX,IAAMC,EAAa,mCAAG,sGAGjBH,EAAAA,EAAAA,IAAA,sBAHiB,uBAEjBI,EAFiB,EAEzBX,KAAQW,QAFiB,kBAIpBA,EAAQT,KAAI,kBAAiC,CAClDC,GADiB,EAAGA,GAEpBS,MAFiB,EAAOA,MAGxBC,OAHiB,EAAcC,YAAd,KAJQ,2CAAH,qDAWbC,EAAY,mCAAG,WAAMC,GAAN,yFAGhBT,EAAAA,EAAAA,IAAA,8BAAiCS,IAHjB,uBAEhBL,EAFgB,EAExBX,KAAQW,QAFgB,kBAInBA,EAAQT,KAAI,kBAAyC,CAC1DC,GADiB,EAAGA,GAEpBS,MAFiB,EAAOA,MAGxBC,OAHiB,EAAcC,YAAd,KAJO,2CAAH,sDAWZG,EAAiB,mCAAG,WAAM7B,GAAN,uGAWrBmB,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,MAXqB,2BAE7BY,KACEG,EAH2B,EAG3BA,GACaU,EAJc,EAI3BC,YACAF,EAL2B,EAK3BA,MACcM,EANa,EAM3BC,aACcC,EAPa,EAO3BC,aACAC,EAR2B,EAQ3BA,SACAC,EAT2B,EAS3BA,OAT2B,kBAYxB,CACLpB,GAAAA,EACAU,OAAAA,EACAD,MAAAA,EACAM,YAAa,IAAIM,KAAKN,GAAaO,cACnCL,UAAWM,KAAKC,MAAkB,GAAZP,GACtBE,SAAAA,EACAC,OAAAA,IAnB6B,4CAAH,sDAuBjBK,EAAiB,mCAAG,WAAMxC,GAAN,yFAGrBmB,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,cAHqB,uBAErByC,EAFqB,EAE7B7B,KAAQ6B,KAFqB,kBAIxBA,EAAK3B,KAAI,kBAAoD,CAClEC,GADc,EAAGA,GAEjB2B,KAFc,EAAOA,KAGrBC,UAHc,EAAaA,UAI3BlB,OAJc,EAAwBmB,aAAxB,KAJe,2CAAH,sDAYjBjC,EAAiB,mCAAG,WAAMX,GAAN,yFAGrBmB,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,cAHqB,uBAErBuB,EAFqB,EAE7BX,KAAQW,QAFqB,kBAIxBA,EAAQT,KAAI,kBAA8B,CAC/CC,GADiB,EAAGA,GAEpBC,OAFiB,EAAOA,OAGxBC,QAHiB,EAAeA,QAAf,KAJY,2CAAH,qD","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/image-service.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsContainer = styled.div`\n  display: flex;\n  padding: 30px;\n  background-color: #3f51b542;\n  margin: 20px 30px 30px;\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n  flex-direction: column;\n  align-items: center;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { ReviewsContainer } from './Reviews.styled';\nimport Loader from 'components/Loader/Loader';\nimport { fetchMovieReviews } from 'services/image-service';\n\nconst Reviews = () => {\n  const { movieId } = useParams('movieId');\n  const [reviews, setReviews] = useState([]);\n  const [onError, setOnError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchReviews = async () => {\n      try {\n        const data = await fetchMovieReviews(movieId);\n        setReviews(data);\n      } catch (error) {\n        setOnError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <ReviewsContainer>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h3>{author}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>Ther is nothing found</p>\n      )}\n      {isLoading && <Loader />}\n      {onError && <p>There is nothing found</p>}\n    </ReviewsContainer>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '53d5445e8f959aee965448ea492bd06d',\n  include_adults: false,\n};\n\nexport const fetchTrending = async () => {\n  const {\n    data: { results },\n  } = await axios.get(`/trending/all/day?`);\n  return results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster: poster_path,\n  }));\n};\n\nexport const fetchByQuery = async query => {\n  const {\n    data: { results },\n  } = await axios.get(`/search/movie?query=${query}`);\n  return results.map(({ id, title, poster_path: poster }) => ({\n    id,\n    title,\n    poster,\n  }));\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const {\n    data: {\n      id,\n      poster_path: poster,\n      title,\n      release_date: releaseYear,\n      vote_average: userScore,\n      overview,\n      genres,\n    },\n  } = await axios.get(`/movie/${movieId}?`);\n  return {\n    id,\n    poster,\n    title,\n    releaseYear: new Date(releaseYear).getFullYear(),\n    userScore: Math.round(userScore * 10),\n    overview,\n    genres,\n  };\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const {\n    data: { cast },\n  } = await axios.get(`/movie/${movieId}/credits?`);\n  return cast.map(({ id, name, character, profile_path: poster }) => ({\n    id,\n    name,\n    character,\n    poster,\n  }));\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const {\n    data: { results },\n  } = await axios.get(`/movie/${movieId}/reviews?`);\n  return results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n};\n"],"names":["ReviewsContainer","styled","movieId","useParams","useState","reviews","setReviews","onError","setOnError","isLoading","setIsLoading","useEffect","fetchReviews","fetchMovieReviews","data","length","map","id","author","content","Loader","axios","api_key","include_adults","fetchTrending","results","title","poster","poster_path","fetchByQuery","query","fetchMovieDetails","releaseYear","release_date","userScore","vote_average","overview","genres","Date","getFullYear","Math","round","fetchMovieCredits","cast","name","character","profile_path"],"sourceRoot":""}