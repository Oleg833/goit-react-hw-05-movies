{"version":3,"file":"static/js/779.b1f7390b.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","components/services/image-service.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsContainer = styled.div`\n  display: flex;\n  padding: 30px;\n  background-color: #3f51b542;\n  margin: 20px 30px 30px;\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n  flex-direction: column;\n  align-items: center;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { ReviewsContainer } from './Reviews.styled';\nimport Loader from 'components/Loader/Loader';\nimport { fetchMovieReviews } from 'components/services/image-service';\n\nconst Reviews = () => {\n  const { movieId } = useParams('movieId');\n  const [reviews, setReviews] = useState([]);\n  const [onError, setOnError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchReviews = async () => {\n      try {\n        const data = await fetchMovieReviews(movieId);\n        setReviews(data);\n      } catch (error) {\n        setOnError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <ReviewsContainer>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h3>{author}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>Ther is nothing found</p>\n      )}\n      {isLoading && <Loader />}\n      {onError && <p>There is nothing found</p>}\n    </ReviewsContainer>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '53d5445e8f959aee965448ea492bd06d',\n  include_adults: false,\n};\n\nexport const fetchTrending = async () => {\n  return axios\n    .get(`/trending/all/day?`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, title, poster_path }) => ({\n        id,\n        title,\n        poster: poster_path,\n      }))\n    )\n    .catch(error => {\n      alert(error.massage);\n    });\n};\n\nexport const fetchByQuery = async query => {\n  return axios\n    .get(`/search/movie?query=${query}`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, title, poster_path: poster }) => ({\n        id,\n        title,\n        poster,\n      }))\n    )\n    .catch(error => {\n      alert(error.massage);\n    });\n};\n\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const {\n      data: {\n        id,\n        poster_path: poster,\n        title,\n        release_date: releaseYear,\n        vote_average: userScore,\n        overview,\n        genres,\n      },\n    } = await axios.get(`/movie/${movieId}?`);\n    return {\n      id,\n      poster,\n      title,\n      releaseYear: new Date(releaseYear).getFullYear(),\n      userScore: Math.round(userScore * 10),\n      overview,\n      genres,\n    };\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n// export const fetchMovieCredits = movieId => {\n//   return axios\n//     .get(`/movie/${movieId}/credits?`)\n//     .then(({ data: { cast } }) =>\n//       cast.map(({ id, name, character, profile_path: poster }) => ({\n//         id,\n//         name,\n//         character,\n//         poster,\n//       }))\n//     )\n//     .catch(error => {\n//       alert(error.massage);\n//     });\n// };\n\nexport const fetchMovieCredits = async movieId => {\n  try {\n    const {\n      data: { cast },\n    } = await axios.get(`/movie/${movieId}/credits?`);\n    return cast.map(({ id, name, character, profile_path: poster }) => ({\n      id,\n      name,\n      character,\n      poster,\n    }));\n  } catch (error) {\n    alert(error.massage);\n  }\n};\n\nexport const fetchMovieReviews = movieId => {\n  return axios\n    .get(`/movie/${movieId}/reviews?`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, author, content }) => ({\n        id,\n        author,\n        content,\n      }))\n    )\n    .catch(error => {\n      alert(error.massage);\n    });\n};\n"],"names":["ReviewsContainer","styled","movieId","useParams","useState","reviews","setReviews","onError","setOnError","isLoading","setIsLoading","useEffect","fetchReviews","fetchMovieReviews","data","length","map","id","author","content","Loader","axios","api_key","include_adults","fetchTrending","then","results","title","poster","poster_path","catch","error","alert","massage","fetchByQuery","query","fetchMovieDetails","releaseYear","release_date","userScore","vote_average","overview","genres","Date","getFullYear","Math","round","console","log","message","fetchMovieCredits","cast","name","character","profile_path"],"sourceRoot":""}